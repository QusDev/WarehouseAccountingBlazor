@page "/category/form";
@page "/category/form/{Id:int}";
@inject IBasicRepository<Category> repository;
@inject NavigationManager navigation;

<EditForm Model="Category" FormName="CategoryForm" OnValidSubmit="@OnFormSubmitAsync">
    <DataAnnotationsValidator />

    <div class="form-group mb-3">
        <label>Name</label>
        <InputText @bind-Value=Category.Name class="form-control" placeholder="Enter category name">@Category.Name</InputText>
        <ValidationMessage For="@(() => Category.Name)" />
    </div>

    <div class="form-group mb-3">
        <label>Description</label>
        <InputText @bind-Value=Category.Description class="form-control" placeholder="Enter category description">@Category.Description</InputText>
        <ValidationMessage For="@(() => Category.Description)" />
    </div>

    <div class="form-group">
        <button type="submit" class="btn btn-success">Submit</button>
        <NavLink href="/category"><button type="button" class="btn btn-danger">Cancel</button></NavLink>
    </div>

</EditForm>

@code {
    [Parameter]
    public int? Id { get; set; } = null;

    [SupplyParameterFromForm]
    public Category Category { get; set; } = null!;

    protected override async Task OnInitializedAsync()
    {
        if (Id == null)
        {
            Category = new Category();
        }
        else
        {
            Category = await repository.GetByIdAsync(Id.Value);
        }
    }

    public async Task OnFormSubmitAsync()
    {
        if(Id == null)
        {
            await repository.AddAsync(Category);
        }
        else
        {
            await repository.UpdateAsync(Category);
        }
        navigation.NavigateTo("/category");
    }
}
